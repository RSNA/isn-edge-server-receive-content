/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainFrame.java
 *
 * Created on Apr 12, 2011, 5:15:39 PM
 */

package org.rsna.UI;

import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.HashMap;
import javax.swing.DefaultListModel;
import org.rsna.retrievedocumentset.*;

/**
 *
 * @author wzhu
 */
public class MainFrame extends javax.swing.JFrame {

    private List<DocumentInfo> docInfoList;
    
    /** Creates new form MainFrame */
    public MainFrame() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblUserToken = new javax.swing.JLabel();
        txtUserToken = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtDOB = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtPassword = new javax.swing.JTextField();
        btnGet = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtResult = new javax.swing.JTextArea();
        btnHash = new javax.swing.JButton();
        btnGetImages = new javax.swing.JButton();
        lblMsg = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RSNA Clearing House Tools");

        lblUserToken.setText("UserToken:");

        txtUserToken.setText("bjho4k6q");

        jLabel1.setText("Date of Birth:");

        txtDOB.setText("19460201");

        jLabel2.setText("Password:");

        txtPassword.setText("test");

        btnGet.setText("Retrieve Documents");
        btnGet.setToolTipText("Retrieve study from CH by hashed transaction identifier");
        btnGet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetActionPerformed(evt);
            }
        });

        txtResult.setColumns(20);
        txtResult.setLineWrap(true);
        txtResult.setRows(5);
        jScrollPane1.setViewportView(txtResult);

        btnHash.setText("Hash");
        btnHash.setToolTipText("Display hashed user token");
        btnHash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHashActionPerformed(evt);
            }
        });

        btnGetImages.setText("Get Images");
        btnGetImages.setToolTipText("Retrieve study from CH by typed in user token");
        btnGetImages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetImagesActionPerformed(evt);
            }
        });

        lblMsg.setText("  ");
        lblMsg.setAutoscrolls(true);
        lblMsg.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel3.setText("Retrieve Studies from RSNA Clearing House");

        jLabel4.setText("(Format: YYYYMMDD)");

        jScrollPane2.setViewportView(jList1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblUserToken)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel2))
                                        .addGap(51, 51, 51))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnHash, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnGet)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnGetImages))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(txtPassword, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtUserToken, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(txtDOB, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(jLabel4))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 76, Short.MAX_VALUE))
                            .addComponent(lblMsg, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUserToken, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblUserToken))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDOB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnHash)
                    .addComponent(btnGet)
                    .addComponent(btnGetImages))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblMsg, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetActionPerformed
        // TODO add your handling code here:
        lblMsg.setText(null);
        try
        {
            String userToken=txtUserToken.getText().replace("-","").toLowerCase();
            String tokenID=TransHash.gen(userToken, txtDOB.getText(), txtPassword.getText());
            lblMsg.setText("Retrieving study for ID:" + tokenID);
            RetrieveDocs(tokenID);            
        } catch (Exception e) {
                    e.printStackTrace();
                    txtResult.setText(e.getMessage());
        }

    }//GEN-LAST:event_btnGetActionPerformed

    private void btnHashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHashActionPerformed
        // TODO add your handling code here:
        lblMsg.setText(null);
        try
        {
            String userToken=txtUserToken.getText().replace("-","").toLowerCase();
            String tokenID=TransHash.gen(userToken, txtDOB.getText(), txtPassword.getText());

            lblMsg.setText(tokenID);
        } catch (Exception e) {
                    e.printStackTrace();
                    txtResult.setText(e.getMessage());
        }
    }//GEN-LAST:event_btnHashActionPerformed

    private void btnGetImagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetImagesActionPerformed
        // TODO add your handling code here:
        lblMsg.setText(null);
        if (txtUserToken.getText().isEmpty())
        {
            lblMsg.setText("Empty User Token.");
        }
        else
        {
            //RetrieveDocs(txtUserToken.getText());
            try {
                String userToken=txtUserToken.getText().replace("-","").toLowerCase();
                String tokenID=TransHash.gen(userToken, txtDOB.getText(), txtPassword.getText());
                lblMsg.setText("Retrieving study for ID:" + tokenID);

                CHGetDocumentSets act = new CHGetDocumentSets();
                for (int i=0; i<docInfoList.size(); i++)
                {
                    if (i==0)
                    {
                    DocumentInfo docInfo=docInfoList.get(i);

                    int numOfImages = act.RetrieveImages(docInfo, tokenID, docInfo.getStudyInstanceUID());
                    String msg = numOfImages + " images were retrieved.";
                    lblMsg.setText(msg);
                    }
                }
            } catch (Exception e) {
                    txtResult.setText(e.getMessage());
            }
        }
    }//GEN-LAST:event_btnGetImagesActionPerformed

    private void RetrieveDocs(String tokenID)
    {
        String msg="";
        ArrayList<String> seriesInstanceUIDList;
        ArrayList<String> sopInstanceUIDList;
        HashMap<String,ArrayList<String>> images;
        int pos=0;
        try
        {
            DefaultListModel model = new DefaultListModel();
            jList1.setModel(model);

            CHGetDocumentSets act = new CHGetDocumentSets();
            //docList = act.retrievedocs(tokenID).getDocument();
            docInfoList = act.RetrieveDocuments(tokenID);

            if (act.NumOfDocs > 0)
            {
                msg = act.NumOfDocs + " document(s) were found.";
                if (docInfoList.size()>0)
                {
                    for (int i=0; i<docInfoList.size(); i++)
                    {
                        DocumentInfo docInfo=docInfoList.get(i);
                        String studyInstanceUID = docInfo.getStudyInstanceUID();
                        msg += "\n" + "Study:" + studyInstanceUID;
                        msg += "\n" + docInfo.getStudyDescription();

                        pos = jList1.getModel().getSize();
                        model.add(pos, "StudyUID:" + studyInstanceUID);
                        //numOfImages = rad69.GetImagesRad69(tokenID, doc.getStudyInstanceUID());
                        //msg += "\n" + numOfImages + " images were retrieved.";
                        images = docInfo.getImages();
                        seriesInstanceUIDList = docInfo.getSeriesInstanceUIDList();
                        if (seriesInstanceUIDList != null) {
                            Iterator seriesItr = seriesInstanceUIDList.iterator();
                            while (seriesItr.hasNext()){
                                String seriesInstanceUID = (String) seriesItr.next();
                                pos = jList1.getModel().getSize();
                                model.add(pos, "Series:" + seriesInstanceUID);
                                sopInstanceUIDList = (ArrayList<String>) images.get(seriesInstanceUID);

                                if (sopInstanceUIDList != null) {
                                    Iterator imagesItr = sopInstanceUIDList.iterator();
                                    while (imagesItr.hasNext()){
                                        String sopInstanceUID = (String) imagesItr.next();
                                        pos = jList1.getModel().getSize();
                                        model.add(pos, sopInstanceUID);
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    msg += "\n no KOS files were found.";
                }
                txtResult.setText(msg);
            }
            else
            {
                txtResult.setText("No document was found for " + tokenID);
            }
        } catch (Exception e) {
                    txtResult.setText(e.getMessage());
        }
    }
    
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        File keystore=new File("c:/rsna/config/keystore.jks");
        System.setProperty("javax.net.ssl.keyStore", keystore.getPath());
        System.setProperty("javax.net.ssl.keyStorePassword", "edge1234");

        File truststore=new File("c:/rsna/config/truststore.jks");
        System.setProperty("javax.net.ssl.trustStore", truststore.getPath());
        System.setProperty("javax.net.ssl.trustStorePassword", "edge1234");
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGet;
    private javax.swing.JButton btnGetImages;
    private javax.swing.JButton btnHash;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblMsg;
    private javax.swing.JLabel lblUserToken;
    private javax.swing.JTextField txtDOB;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextArea txtResult;
    private javax.swing.JTextField txtUserToken;
    // End of variables declaration//GEN-END:variables

}
